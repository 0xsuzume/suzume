// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.9.0;

import "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967Proxy.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

contract SuzumeUpgradableProxyFactory is OwnableUpgradeable {
    event ProxyCreated(address indexed proxyAddress);

    function createProxy(address initialImplementation, bytes memory initData) public onlyOwner {
        bytes32 salt = keccak256(abi.encodePacked(initialImplementation, initData));
        address proxyAddress = address(new SuzumeUpgradableProxy{salt: salt}(initialImplementation, initData));
        emit ProxyCreated(proxyAddress);
    }
}

contract SuzumeUpgradableProxy is ERC1967Proxy, OwnableUpgradeable {
    struct Line {
        string webAddress;
        // Add any other data you want to associate with the line
    }

    mapping(uint256 => Line) public lines;

    constructor(address initialImplementation, bytes memory initData)
        ERC1967Proxy(initialImplementation, initData)
    {}

    function getProxyAdmin() public view returns (address) {
        return owner();
    }

    function transferProxyAdmin(address newAdmin) public onlyOwner {
        transferOwnership(newAdmin);
    }

    function upgradeTo(address newImplementation) public payable onlyOwner {
        _upgradeTo(newImplementation);
        emit ProxyUpgraded(newImplementation);
    }

    function upgradeToAndCall(address newImplementation, bytes memory initData) public payable onlyOwner {
        _upgradeTo(newImplementation);
        if (initData.length > 0) {
            (bool success, ) = newImplementation.delegatecall(initData);
            require(success, "Proxy: Upgrade failed");
        }
    }

    function setWebAddress(uint256 lineNumber, string memory addressText) public onlyOwner {
        lines[lineNumber].webAddress = addressText;
    }

    fallback () external payable {
        _fallback();
    }

    receive () external payable {
        _fallback();
    }

    event ProxyUpgraded(address indexed newImplementation);
}

contract SuzumeImplementationV1 is OwnableUpgradeable {
    uint256 public data;

    function initialize(uint256 _data) public initializer {
        data = _data;
        __Ownable_init();
    }

    function setData(uint256 _data) public onlyOwner {
        data = _data;
    }
}
